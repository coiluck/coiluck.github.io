---
import { getCollection, render } from 'astro:content';
import { generateExcerpt } from '../../utils/generateExcerpt.js';
import Layout from '../../layouts/blogLayout.astro';
import Topbar from '../../components/topbar.astro';
import BlogImage from '../../components/blog-image.astro';
import { Image } from 'astro:assets';
import backIcon from '../../assets/images/back.svg';
import '../../styles/remark-link-card.css';

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.published !== false;
  });

  return posts.map((post) => {
    const filename = post.id.replace(/\.md$/, '').replace(/^\d{4}-\d{2}-\d{2}-/, '');
    const slug = filename.replace(/^\d{4}-\d{2}-\d{2}-/, '');

    return {
      params: { slug },
      props: { post },
    };
  });
}

const { post } = Astro.props;
const { Content } = await render(post);

const ogTitle = post.data.title || '投稿';
const ogUrl = new URL(Astro.url.pathname, Astro.site).toString();
const ogDescription = generateExcerpt(post, 75);
---
<Layout
  pageTitle={post.data.title}
  ogTitle={ogTitle}
  ogDescription={ogDescription}
  ogUrl={ogUrl}
>
  <Topbar />
  <BlogImage />
  <article class="blog-post">
    <h2>{post.data.title}</h2>
    <div class="meta">
      <p>投稿日: {post.data.date}</p>
      <p>
        タグ:
        {(post.data.tags ?? []).map((tag, tagIndex) => (
          <span>
            <a href={`/blog/tag/${encodeURIComponent(tag)}`}>
              <span style="color: #ff7f7e;">#</span>{tag}
            </a>
            {tagIndex < (post.data.tags ?? []).length - 1 && ', '}
          </span>
        ))}
      </p>
    </div>

    <div class="blog-tag-line"></div>

    <div class="content prose">
      <Content />
    </div>
  </article>

  <div class="line-under-blog"></div>

  <button class="top-button-container">
    <div class="circle-button">
      <Image src={backIcon} alt="" />
    </div>
    <span class="top-text">Top</span>
  </button>

  <div style="height: 80px;"></div>

  <style is:global>
    @font-face {
      font-family: 'JetBrainsMono';
      src: url('/JetBrainsMono-Light.woff2') format('woff2');
    }
    .blog-post {
      width: 70%;
      margin: 0 auto;
    }
    @media (max-width: 767px) {
      .blog-post {
        width: 90%;
      }
    }
    .blog-post h2 {
      margin: .5rem 0 0;
      text-align: center;
    }
    .meta {
      font-size: 0.9rem;
      text-align: center;
      color: #666;
    }
    .meta p{
      margin: .5rem 0 0;
    }
    .meta p span a {
      color: #666;
      text-decoration: underline rgba(102, 102, 102, 0);;
      transition: all 0.3s ease;
    }
    .meta p span a:hover {
      color: #333;
      text-decoration: underline rgba(102, 102, 102, 1);
    }

    .blog-tag-line {
      width: 100%;
      height: 1px;
      background-color: #888;
      margin: 30px auto;
    }
    .content {
      margin-bottom: 32px;
    }
    /* 記事本文内の装飾 */
    .ff7f7e {
      color: #ff7f7e; /* 使うときは<span class="ff7f7e"> */
    }
    .footnotes {
      border-top: 1px dashed #888;
    }
    /* 勝手に出てくる装飾を無効化 */
    .footnotes h2, #footnote-label {
      display: none;
    }
    .footnotes ol {
      margin: 32px 0; /* .contentについているmargin-bottomと合わせる */
    }
    .prose a.blog-link {
      color: black;
      text-decoration-color: black;
    }
    .prose sup a {
      color: #6088C6;
      text-decoration: none;
    }
    .prose sup a:visited {
      color: #6088C6;
    }
    .prose sup a:hover,
    .prose sup a:focus {
      color: #6088C6;
      text-decoration: none;
    }
    .prose a.data-footnote-backref {
      color: #6088C6;
      text-decoration: none;
    }
    .prose a.data-footnote-backref:visited {
      color: #6088C6;
    }
    .prose a.data-footnote-backref:hover,
    .prose a.data-footnote-backref:focus {
      color: #6088C6;
      text-decoration: none;
    }
    /* 引用部分の装飾 */
    .prose blockquote {
      padding: 10px 15px;
      margin: 10px 0;
      box-sizing: border-box;
      border-left: 4px solid #ff7f7e;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.14);
    }
    .prose blockquote p {
      margin: 0;
      padding: 0;
    }
    .prose p {
      margin: 0;
      padding: 0;
    }
    .prose .footnotes h2 {
      display: none;
    }
    .prose code {
      background-color: #ccc;
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
      font-size: .8rem;
      font-family: "JetBrainsMono", sans-serif;
    }
    .expressive-code { /* 「```」で囲まれたコードの上下にスペースを追加 */
      margin: 1.2rem 0;
    }
    .expressive-code .frame .header .title::after {
      border-top: 1.5px solid #ff7f7e !important;
    }
    .expressive-code .frame .header {
      background: #1e2124 !important;
    }
    .expressive-code {
      /* コードブロックの背景色 */
      --ec-frm-edBg: #24292e !important;
      --ec-frm-edActTabBg: #24292e !important;
    }

    /* 個別の記事のTopへボタン */
    .top-button-container {
      display: flex;
      align-items: center;
      position: relative;
      top: 20px;
      margin-left: 15%;
      width: fit-content;
      color: #ff7f7e;
      font-family: 'mamelon3.5', sans-serif;
      text-decoration: none;
      border: none;
      cursor: pointer;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }
    .top-button-container::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0px;
      height: 0.5px;
      background-color: #ff7f7e;
      transition: width 0.3s ease-in-out;
    }
    .top-button-container:hover::before {
      width: 100%;
    }
    .circle-button {
      position: relative;
      width: 20px;
      height: 20px;
      background-color: #ff7f7e;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-right: 10px;
    }
    .circle-button img {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 60%;
      height: 60%;
      object-fit: contain;
      overflow: hidden;
    }
    .top-button-container:hover .circle-button img {
      animation: arrowAnimation 0.9s ease-in-out infinite;
    }
    @keyframes arrowAnimation {
      0% {
        transform: translate(-50%, -50%) translateX(0);
        opacity: 1;
      }
      20% {
        transform: translate(-50%, -50%) translateX(-150%);
        opacity: 0;
      }
      40% {
        transform: translate(-50%, -50%) translateX(150%);
        opacity: 0;
      }
      66% {
        transform: translate(-50%, -50%) translateX(0);
        opacity: 1;
      }
      100% {
        transform: translate(-50%, -50%) translateX(0);
        opacity: 1;
      }
    }
    .top-text {
      font-size: 18px;
      font-weight: bold;
    }
    @media (max-width: 767px) {
      .top-button-container {
        margin-left: 5%;
      }
    }
    .line-under-blog {
      width: 70%;
      height: 1px;
      background-color: #888;
      margin: 20px auto 20px;
    }
    @media (max-width: 767px) {
      .line-under-blog {
        width: 90%;
        margin-top: 2em;
      }
    }
  </style>
  <script>
  // URLを保存
  window.addEventListener('load', function() {
    const referrer = document.referrer;
    if (referrer && referrer.includes('/blog/')) {
      sessionStorage.setItem('lastListPage', referrer);
    }
  
    // クリック時の挙動を設定
    const topButton = document.querySelector('.top-button-container');
    if (topButton) {
      topButton.addEventListener('click', function(e) {
        const lastPage = sessionStorage.getItem('lastListPage');
        if (lastPage && lastPage !== window.location.href) {
          window.location.href = lastPage;
        } else {
          // 外部からの人は1ページ目へ
          window.location.href = '/blog/';
        }
      });
    }
  });
  // 連続した<br>タグを削除
  document.addEventListener('DOMContentLoaded', () => {
    // 脚注セクションを探す
    const footnotesContainer = document.querySelector('section[data-footnotes]');
  
    if (!footnotesContainer) {
      return;
    }

    // 脚注セクションの直前の要素を取得
    const lastElement = footnotesContainer.previousElementSibling;

    // その要素が <p> タグであるかをチェック
    if (lastElement && lastElement.tagName === 'P') {
      const pElement = lastElement;

      // 末尾にある2つ以上連続した<br>タグを、2つの<br>に書き換える
      const originalHTML = pElement.innerHTML;
      pElement.innerHTML = pElement.innerHTML.replace(
        /(<br\s*\/?>\s*){2,}\s*$/,
        '<br><br>'
      );
      if (originalHTML !== pElement.innerHTML) {
        console.log('HTMLが変更されました');
      } else {
        console.log('HTMLに変更はありませんでした');
      }
    } else {
      console.log('脚注直前にPタグが見つかりませんでした');
    }
  });
  </script>
</Layout>