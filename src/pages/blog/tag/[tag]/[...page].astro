---
// コンポーネントのインポートパスが深くなる点に注意
import Topbar from '../../../../components/topbar.astro';
import Layout from '../../../../layouts/blogLayout.astro';
import BlogImage from '../../../../components/blog-image.astro';
import Pagination from '../../../../components/pagination.astro'; 
import BlogLine from '../../../../components/blog-line.astro';

interface Post {
  frontmatter: {
    title?: string;
    date?: string;
    tags?: string[];
    custom_excerpt?: string;
    published?: boolean;
  };
  rawContent: () => Promise<string> | string;
  file: string;
}

interface PageData {
  currentPage: number;
  lastPage: number;
  url: {
    prev: string | undefined;
    next: string | undefined;
  };
  data: Array<{
    frontmatter: {
      title?: string;
      date?: string;
      tags?: string[];
    };
    file?: string;
    excerpt?: string;
  }>;
}

export async function getStaticPaths({ paginate }) {
  try {
    // 1. すべてのブログ投稿を取得
    const posts = await import.meta.glob<Post>('/src/content/posts/*.md', { eager: true });
    const postEntries = Object.entries(posts);
    
    // 2. frontmatterからすべてのタグを重複なく収集する
    const allTags = new Set<string>();
    postEntries.forEach(([_, post]) => {
      if (post.frontmatter.tags && Array.isArray(post.frontmatter.tags)) {
        post.frontmatter.tags.forEach(tag => allTags.add(tag));
      }
    });

    // 3. 各タグごとにページを生成する
    const paths = [];
    
    for (const tag of allTags) {
      // 現在のタグが含まれる投稿のみをフィルタリング
      const filteredPosts = postEntries
        .map(([_, post]) => post)
        .filter(post => post.frontmatter.tags?.includes(tag as string));

      // 抜粋処理
      const postsWithExcerpts = await Promise.all(
        filteredPosts.map(async (post, index) => {
          let excerpt = '';
          
          try {
            if (post.frontmatter?.custom_excerpt) {
              excerpt = post.frontmatter.custom_excerpt;
            } else {
              let content = '';
              if (post.rawContent) {
                if (typeof post.rawContent === 'function') {
                  content = await post.rawContent();
                } else {
                  content = post.rawContent;
                }
              }
              
              if (content) {
                // Markdownの記法や改行を除去してプレーンテキストに近づける
                const plainText = content
                  .replace(/#+\s/g, '')        // 見出し記号 (#) を除去
                  .replace(/<br\s*\/?>/gi, ' ') // <br> タグをスペースに変換
                  .replace(/\r\n|\n|\r/g, ' ') // 改行コードをスペースに変換
                  .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1') // Markdownリンクをテキストに
                  .replace(/!\[([^\]]*)\]\([^\)]+\)/g, '')  // Markdown画像を空に
                  .replace(/`/g, '')           // バッククォートを除去
                  .replace(/\*|_/g, '')        // 強調表現の記号を除去
                  .replace(/\s+/g, ' ')        // 連続する空白を1つにまとめる
                  .replace(/\{:\s*\.blog-link\s*\}/g, '')  // {: .blog-link } を除去
                  .replace(/<[^>]+>/g, '')     // HTMLタグをすべて除去
                  .trim();

                const moreTag = '<!--more-->';
                const moreIndex = plainText.indexOf(moreTag);
                if (moreIndex !== -1) {
                  excerpt = plainText.substring(0, moreIndex).trim();
                } else {
                  excerpt = plainText.substring(0, 150);
                  if (plainText.length > 150) {
                    excerpt += '...';
                  }
                }
              } else {
                excerpt = `投稿${index + 1}の抜粋です。`;
              }
            }
          } catch (error) {
            excerpt = '抜粋の取得に失敗しました。';
          }
          
          return {
            ...post,
            excerpt
          };
        })
      );

      // 有効な投稿のフィルタリング
      const validPosts = postsWithExcerpts.filter(post => 
        post.frontmatter?.title && post.frontmatter?.date && post.frontmatter?.published !== false
      );

      // 投稿を日付の新しい順にソート
      const sortedPosts = validPosts.sort((a, b) =>
        new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime()
      );

      // フィルタリングとソートが完了した投稿リストでページネーションを実行
      const paginatedPosts = paginate(sortedPosts, {
        params: { tag },
        pageSize: 5,
      });

      // 各ページのパスを追加
      paths.push(...paginatedPosts);
    }
    
    return paths;
    
  } catch (error) {
    // 緊急フォールバック
    return paginate([{
      file: '/error.md',
      frontmatter: {
        title: 'エラー用ダミー投稿',
        date: '1970-01-01',
        tags: ['error']
      },
      excerpt: 'システムエラーが発生しました。'
    }], { 
      params: { tag: 'error' },
      pageSize: 5 
    });
  }
}

// ページコンポーネント側のログ
console.log('=== タグページコンポーネント実行開始 ===');
console.log('受信したAstro.props:', {
  type: typeof Astro.props,
  keys: Object.keys(Astro.props || {}),
  stringified: JSON.stringify(Astro.props, null, 2)
});

const { page } = Astro.props as { page: PageData };
const { tag } = Astro.params;

if (page) {
  console.log('✅ pageオブジェクト正常受信:', {
    currentPage: page.currentPage,
    lastPage: page.lastPage,
    dataLength: page.data?.length,
    urlKeys: page.url ? Object.keys(page.url) : [],
    firstDataSample: page.data?.[0] ? {
      title: page.data[0].frontmatter?.title,
      file: page.data[0].file
    } : null
  });
} else {
  console.error('❌ pageオブジェクトが未定義');
}
---

<Layout pageTitle={`タグ: ${tag}`}>
  <Topbar />
  <BlogImage />
  <article>
    <div class="blog-content">
      <div class="tag-head">
        <div class="tag-pankuzu">
          <a href="/blog">Top</a> &gt;&gt; <a href="">{tag}</a>
        </div>
        <div class="tag-itirann">
          <span><strong><font color="#ff7f7e">#</font>{tag} の記事の一覧</strong></span>
        </div>
      </div>
      <div class="blog-tag-line"></div>
      
        {/* メインコンテンツ */}
        {page && page.data && page.data.length > 0 ? (
          <>
            {page.data.map((post, index) => {
              const filename = post.file?.split('/').pop()?.replace('.md', '') || `post-${index}`;
              
              return (
                <article class="blog-post" key={index}>
                  <header>
                    <h2>
                      <a href={`/blog/${filename}`}>
                        {post.frontmatter?.title || `無題の投稿 ${index + 1}`}
                      </a>
                    </h2>
                    <div class="meta">
                      {post.frontmatter?.tags && post.frontmatter.tags.length > 0 && (
                        <div class="tags">
                          {post.frontmatter.tags.map((tag, tagIndex) => (
                            <span key={tagIndex}>
                              <a href={`/blog/tag/${encodeURIComponent(tag)}`} class="post-tag">
                                <span style="color: #ff7f7e;">#</span>{tag}
                              </a>
                              {tagIndex < post.frontmatter.tags.length - 1 && ', '}
                            </span>
                          ))}
                        </div>
                      )}
                      <time class="date">{post.frontmatter?.date || '日付不明'}</time>
                    </div>
                  </header>
                  
                  {post.excerpt && (
                    <p class="excerpt">{post.excerpt}</p>
                  )}
                  
                  <footer>
                    <a href={`/blog/${filename}`} class="read-more">続きを読む</a>
                  </footer>
                </article>
              );
            })}
          </>
        ) : (
          <div style="text-align: center; padding: 2rem;">
            <p>📝 現在、表示できる投稿がありません。</p>
          </div>
        )}
      </div>
      <BlogLine />
      <Pagination page={page} />
    </article>

    <style>
      .tag-pankuzu {
        font-size: 0.95rem;
      }
      .tag-pankuzu a {
        color: #666;
        text-decoration: none;
      }
      .tag-itirann {
        margin-top: 10px;
      }
      .tag-itirann span {
        font-size: 1.1em;
      }
      .blog-tag-line {
        width: 100%;
        height: 1px;
        background-color: #888;
        margin: 30px auto 30px;
      }
      .blog-content {
        margin: 40px auto 30px;
        width: 70%;
      }
    
      .blog-post {
        margin: 2rem auto;
        width: 100%;
      }
    
      .blog-post h2 {
        text-align: center;
      }
    
      .blog-post h2 a {
        color: black;
        text-decoration: none;
        background: linear-gradient(currentcolor, currentcolor) left bottom / 100% 2px no-repeat,
        linear-gradient(#f6d893, #f6d893) right 60% / 0 .8em no-repeat;
        transition: background-size .4s cubic-bezier(0.215, 0.61, 0.355, 1);
      }
      .blog-post h2 a:hover {
        background-position: right bottom, left 60%;
        background-size: 0 2px, 100% .8em;
      }
      @media (pointer: none) { /* タッチデバイスではホバー効果を無効化 */
        .post-title {
          color: black;
          text-decoration: none;
          border-bottom: solid 2px black;
          background: none;
          transition: none;
        }
        .post-title:hover {
          background-position: initial;
          background-size: initial;
        }
      }
      .meta {
        margin-bottom: .5rem;
        font-size: 0.9rem;
        color: #666;
        gap: 1rem;
      }
      
      .tags {
        color: #666;
        margin-top: 1em;
        text-align: center;
      }
      .tags a {
        font-size: .95rem;
        color: #666;
        margin-top: 1em;
        text-align: center;
        text-decoration: none;
      }
      .tags a:hover {
        text-decoration: underline;
      }
      .date {
        font-size: 0.9rem;
        color: #666;
        text-align: left;
      }
      
      .excerpt {
        margin: .5rem 0 0;
        line-height: 1.6;
        color: #222;
      }
    
      .read-more {
        display: inline-block;
        margin-top: 0.8em;
        color: #0066cc;
        text-decoration: none;
      }
      .read-more:hover {
        text-decoration: underline;
      }
    
    @media (max-width: 767px) {
      .blog-content{
        width: 90%;
      }
    }
    </style>
  </Layout>
