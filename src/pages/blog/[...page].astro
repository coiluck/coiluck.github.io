---
import { getCollection } from 'astro:content';
import Topbar from '../../components/topbar.astro';
import Layout from '../../layouts/blogLayout.astro';
import BlogImage from '../../components/blog-image.astro';
import Pagination from '../../components/pagination.astro'; 
import BlogLine from '../../components/blog-line.astro';

export async function getStaticPaths({ paginate }) {
  // excerptを生成する関数
  function generateExcerpt(entry) {
    // すでにcustom_excerptがある場合はそれを使用
    if (entry.data.custom_excerpt) {
      return entry.data.custom_excerpt;
    }

    // 抜粋を生成
    const content = entry.body || '';
    
    let excerpt = '';

    if (content) {
      const moreTag = '<!--more-->';
      const moreIndex = content.indexOf(moreTag);

      let textToProcess = moreIndex !== -1 
        ? content.substring(0, moreIndex) 
        : content;

      const plainText = textToProcess
        .replace(/#+\s/g, '')
        .replace(/<rt>.*?<\/rt>/gi, '')
        .replace(/<br\s*\/?>/gi, ' ')
        .replace(/\r\n|\n|\r/g, ' ')
        .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1')
        .replace(/!\[([^\]]*)\]\([^\)]+\)/g, '')
        .replace(/`/g, '')
        .replace(/\*|_/g, '')
        .replace(/\s+/g, ' ')
        .replace(/\{:\s*\.blog-link\s*\}/g, '')
        .replace(/<[^>]+>/g, '')
        .trim();

      if (moreIndex !== -1) {
        excerpt = plainText;
      } else {
        excerpt = plainText.substring(0, 150);
        if (plainText.length > 150) {
          excerpt += '...';
        }
      }
    }
    return excerpt;
  }

  try {
    // Content Collectionから取得
    const allPosts = await getCollection('posts', ({ data }) => {
      return data.published !== false;
    });
    
    // 各投稿のexcerptを生成
    const postsWithExcerpt = allPosts.map((post, index) => {
      const excerpt = generateExcerpt(post);
      return {
        ...post,
        excerpt
      };
    });

    // 日付でソート
    const sortedPosts = postsWithExcerpt.sort((a, b) => {
      const dateA = new Date(a.data.date).getTime();
      const dateB = new Date(b.data.date).getTime();
      return dateB - dateA;
    });
    
    // ページネーション実行
    const paginatedResult = paginate(sortedPosts, { pageSize: 5 });
    return paginatedResult;
    
  } catch (error) {
    console.error('エラーの詳細:', {
      message: error.message,
      stack: error.stack?.split('\n').slice(0, 5)
    });
    // エラー用投稿
    return paginate([{
      id: 'error',
      data: {
        title: 'エラー用ダミー投稿',
        date: '1970-01-01'
      },
      excerpt: 'システムエラーが発生しました。'
    }], { pageSize: 5 });
  }
}

const { page } = Astro.props;

// OGP用
const ogTitle = "blog";
const ogDescription = "書く、これしか出来ないから";
const ogUrl = new URL(Astro.url.pathname, Astro.site).toString();
---

<Layout 
  pageTitle="blog" 
  ogTitle={ogTitle} 
  ogDescription={ogDescription} 
  ogUrl={ogUrl}
>
  <Topbar />
  <BlogImage />
  <article>
    <div class="blog-content">
      {page && page.data && page.data.length > 0 ? (
        <>
        {page.data.map((post, index) => {
          const slug = post.id.replace(/\.md$/, '').replace(/^\d{4}-\d{2}-\d{2}-/, '');
          const title = post.data?.title || `無題の投稿 ${index + 1}`;
          const tags = post.data.tags ?? [];
          const date = post.data.date;
  
          return (
            <article class="blog-post" key={index}>
              <header>
                <h2>
                  <a href={`/blog/${slug}`}>
                    {title}
                  </a>
                </h2>
                <div class="meta">
                  {tags.length > 0 && (
                    <div class="tags">
                  {tags.map((tag, tagIndex) => (
                    <span key={tagIndex}>
                      <a href={`/blog/tag/${encodeURIComponent(tag)}`} class="post-tag">
                        <span style="color: #ff7f7e;">#</span>{tag}
                      </a>
                      {tagIndex < tags.length - 1 && ', '}
                    </span>
                  ))}
                </div>
              )}
              <time class="date">{date}</time>
            </div>
          </header>
          {post.excerpt && (
            <p class="excerpt">{post.excerpt}</p>
          )}
          <footer>
            <a href={`/blog/${slug}`} class="read-more">続きを読む</a>
          </footer>
        </article>
        );
      })}
        </>
      ) : (
        <div style="text-align: center; padding: 2rem;">
          <p>現在、表示できる投稿がありません</p>
        </div>
      )}
    </div>
    <BlogLine />
    <Pagination page={page} />
  </article>
</Layout>

<style>
  .blog-content {
    margin: 40px auto 30px;
    width: 70%;
  }

  .blog-post {
    margin: 2rem auto;
    width: 100%;
  }

  .blog-post h2 {
    text-align: center;
  }

  .blog-post h2 a {
    color: black;
    text-decoration: none;
    background: linear-gradient(currentcolor, currentcolor) left bottom / 100% 2px no-repeat,
		linear-gradient(#f6d893, #f6d893) right 60% / 0 .8em no-repeat;
    transition: background-size .4s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .blog-post h2 a:hover {
    background-position: right bottom, left 60%;
    background-size: 0 2px, 100% .8em;
  }
  @media (pointer: none) {
    .post-title {
      color: black;
      text-decoration: none;
      border-bottom: solid 2px black;
      background: none;
      transition: none;
    }
    .post-title:hover {
      background-position: initial;
      background-size: initial;
    }
  }
  .meta {
    margin-bottom: .5rem;
    font-size: 0.9rem;
    color: #666;
    gap: 1rem;
  }
  
  .tags {
    color: #666;
    margin-top: 1em;
    text-align: center;
  }
  .tags a {
    color: #666;
    text-decoration: underline rgba(102, 102, 102, 0);;
    transition: all 0.3s ease;
  }
  .tags a:hover {
    color: #333;
    text-decoration: underline rgba(51, 51, 51, 1);
  }
  .date {
    font-size: 0.9rem;
    color: #666;
    text-align: left;
  }
  
  .excerpt {
    margin: .5rem 0 0;
    line-height: 1.6;
    color: #222;
  }

  .read-more {
    display: inline-block;
    position: relative;
    margin-top: 0.8rem;
    color: #0066cc;
    text-decoration: none;
  }
  .read-more::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: rgba(0, 102, 204, 1);
    transform: scaleY(0.5);
    transform-origin: bottom;
    transition: width 0.3s ease;
  }
  .read-more:hover::before {
    width: 100%;
    background-color: rgba(0, 102, 204, 1);
  }

@media (max-width: 767px) {
  .blog-content{
    width: 90%;
  }
}
</style>